/**
 * Script para corregir la categor√≠a del Puente Peatonal Terminal Intermedio
 * Ejecutar con: npx tsx scripts/fix-puente-peatonal-category.ts
 */

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function fixPuentePeatonalCategory() {
  console.log('üîß Corrigiendo categor√≠a del Puente Peatonal Terminal Intermedio...')

  try {
    // Buscar el proyecto
    const proyecto = await prisma.proyecto.findFirst({
      where: {
        titulo: {
          contains: 'Puente Peatonal Terminal Intermedio'
        }
      },
      include: {
        imagenes: {
          select: { id: true, url: true }
        }
      }
    })

    if (!proyecto) {
      console.log('‚ùå No se encontr√≥ el proyecto "Puente Peatonal Terminal Intermedio"')
      return
    }

    console.log(`üìã Proyecto encontrado: ${proyecto.titulo}`)
    console.log(`üìÇ Categor√≠a actual: ${proyecto.categoria}`)
    console.log(`üñºÔ∏è  Im√°genes: ${proyecto.imagenes.length}`)

    if (proyecto.categoria === 'PUENTES_PEATONALES') {
      console.log('‚úÖ El proyecto ya tiene la categor√≠a correcta')
      return
    }

    // Actualizar la categor√≠a
    const updatedProject = await prisma.proyecto.update({
      where: { id: proyecto.id },
      data: { categoria: 'PUENTES_PEATONALES' }
    })

    console.log(`‚úÖ Categor√≠a actualizada de ${proyecto.categoria} a ${updatedProject.categoria}`)
    console.log(`üìå Las im√°genes se mover√°n autom√°ticamente cuando ejecutes el script de reorganizaci√≥n`)

  } catch (error) {
    console.error('‚ùå Error corrigiendo categor√≠a:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Ejecutar script
if (require.main === module) {
  fixPuentePeatonalCategory()
    .then(() => {
      console.log('\nCorrecci√≥n completada')
      process.exit(0)
    })
    .catch((error) => {
      console.error('Error ejecutando correcci√≥n:', error)
      process.exit(1)
    })
}

export { fixPuentePeatonalCategory }