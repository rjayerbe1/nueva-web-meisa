import { PrismaClient } from '@prisma/client'
import * as dotenv from 'dotenv'

dotenv.config({ path: '.env.local' })

const prisma = new PrismaClient()

async function checkMigrationStatus() {
  try {
    console.log('üìä ESTADO DE LA MIGRACI√ìN DE IM√ÅGENES\n')
    console.log('=' .repeat(50) + '\n')

    // Total de proyectos
    const totalProjects = await prisma.proyecto.count()
    console.log(`üìã Total proyectos: ${totalProjects}`)

    // Total de im√°genes
    const totalImages = await prisma.imagenProyecto.count()
    console.log(`üñºÔ∏è  Total im√°genes: ${totalImages}`)

    // Proyectos con im√°genes
    const projectsWithImages = await prisma.proyecto.count({
      where: {
        imagenes: {
          some: {}
        }
      }
    })

    console.log(`‚úÖ Proyectos con im√°genes: ${projectsWithImages}`)
    console.log(`‚ö†Ô∏è  Proyectos sin im√°genes: ${totalProjects - projectsWithImages}`)

    // Distribuci√≥n por categor√≠a
    console.log('\nüìä DISTRIBUCI√ìN POR CATEGOR√çA:')
    const categorias = await prisma.proyecto.groupBy({
      by: ['categoria'],
      _count: { id: true },
      orderBy: { _count: { id: 'desc' } }
    })

    categorias.forEach(cat => {
      console.log(`   ${cat.categoria}: ${cat._count.id} proyectos`)
    })

    // Promedio de im√°genes por proyecto
    if (projectsWithImages > 0) {
      const avgImages = Math.round(totalImages / projectsWithImages * 100) / 100
      console.log(`\nüìà Promedio im√°genes por proyecto: ${avgImages}`)
    }

    // Algunos ejemplos de proyectos con m√°s im√°genes
    const projectsWithMostImages = await prisma.proyecto.findMany({
      include: {
        imagenes: true
      },
      orderBy: {
        imagenes: {
          _count: 'desc'
        }
      },
      take: 5
    })

    console.log('\nüèÜ PROYECTOS CON M√ÅS IM√ÅGENES:')
    projectsWithMostImages.forEach(project => {
      console.log(`   ${project.titulo}: ${project.imagenes.length} im√°genes`)
    })

    // Verificar si hay im√°genes reales (no placeholders)
    const realImages = await prisma.imagenProyecto.count({
      where: {
        url: {
          contains: '-1748550'  // timestamp de las im√°genes descargadas hoy
        }
      }
    })

    console.log(`\nüéØ Im√°genes reales descargadas hoy: ${realImages}`)

    console.log('\n‚úÖ REVISI√ìN COMPLETADA')

  } catch (error) {
    console.error('‚ùå Error:', error)
  } finally {
    await prisma.$disconnect()
  }
}

checkMigrationStatus()