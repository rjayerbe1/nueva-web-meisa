import { PrismaClient } from '@prisma/client'
import * as dotenv from 'dotenv'

// Cargar variables de entorno
dotenv.config({ path: '.env.local' })

const prisma = new PrismaClient()

async function fixServices() {
  try {
    // Limpiar servicios problem√°ticos
    await prisma.servicio.deleteMany({
      where: {
        nombre: 'Consultor√≠a'
      }
    })
    
    // Eliminar todos los servicios para recrearlos limpiamente
    await prisma.servicio.deleteMany({})

    // Recrear servicios con datos completos
    const services = [
      {
        nombre: 'Dise√±o Estructural',
        slug: 'diseno-estructural',
        descripcion: 'Dise√±o y c√°lculo de estructuras met√°licas utilizando software especializado y normativas internacionales.',
        caracteristicas: [
          'An√°lisis de cargas y esfuerzos',
          'Modelado 3D estructural',
          'Cumplimiento de normativas NSR-10',
          'Optimizaci√≥n de materiales'
        ],
        orden: 1,
        icono: 'üèóÔ∏è'
      },
      {
        nombre: 'Fabricaci√≥n de Estructuras',
        slug: 'fabricacion-estructuras',
        descripcion: 'Fabricaci√≥n de estructuras met√°licas con tecnolog√≠a de punta y control de calidad certificado.',
        caracteristicas: [
          'Corte con plasma CNC',
          'Soldadura certificada',
          'Control de calidad riguroso',
          'Acabados especializados'
        ],
        orden: 2,
        icono: '‚öôÔ∏è'
      },
      {
        nombre: 'Montaje y Instalaci√≥n',
        slug: 'montaje-instalacion',
        descripcion: 'Servicio completo de montaje e instalaci√≥n de estructuras met√°licas en obra.',
        caracteristicas: [
          'Personal t√©cnico especializado',
          'Equipos de izaje certificados',
          'Supervisi√≥n t√©cnica',
          'Cumplimiento de cronogramas'
        ],
        orden: 3,
        icono: 'üîß'
      },
      {
        nombre: 'Consultor√≠a T√©cnica',
        slug: 'consultoria-tecnica',
        descripcion: 'Asesor√≠a especializada en proyectos de estructuras met√°licas y optimizaci√≥n de procesos.',
        caracteristicas: [
          'Evaluaci√≥n de proyectos existentes',
          'Optimizaci√≥n de costos',
          'Asesor√≠a en normativas',
          'Revisi√≥n de dise√±os'
        ],
        orden: 4,
        icono: 'üí°'
      }
    ]

    for (const service of services) {
      await prisma.servicio.upsert({
        where: { slug: service.slug },
        update: service,
        create: service,
      })
    }

    console.log('‚úÖ Servicios actualizados exitosamente')
    
    // Verificar resultado
    const updatedServices = await prisma.servicio.findMany({
      orderBy: { orden: 'asc' }
    })
    
    console.log('\nüìã Servicios actualizados:')
    updatedServices.forEach((service, index) => {
      console.log(`${index + 1}. ${service.nombre} (${service.caracteristicas?.length || 0} caracter√≠sticas)`)
    })
    
  } catch (error) {
    console.error('‚ùå Error al arreglar servicios:', error)
  } finally {
    await prisma.$disconnect()
  }
}

fixServices()