const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

async function createCompleteBackup() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üöÄ Iniciando backup completo de MEISA...');
    
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupDir = path.join(process.cwd(), 'backups');
    const backupFile = path.join(backupDir, `meisa-complete-backup-${timestamp}.json`);

    // Crear directorio de backups si no existe
    await fs.promises.mkdir(backupDir, { recursive: true });

    console.log('üìä Conectando a la base de datos...');
    await prisma.$connect();
    console.log('‚úÖ Conexi√≥n establecida');

    console.log('üìã Obteniendo todos los datos...');

    const data = {
      timestamp: new Date().toISOString(),
      version: '2.0.0',
      description: 'Backup completo despu√©s de mejoras en UI de servicios especializados',
      changes: [
        'Eliminada secci√≥n "Valor Agregado MEISA" de p√°gina general de servicios',
        'Mejorado dise√±o del hero section en p√°ginas de detalle de servicios',
        'Implementado icono oficial de WhatsApp en bot√≥n de contacto',
        'Removida informaci√≥n duplicada en tarjetas laterales de servicios',
        'Optimizada jerarqu√≠a visual y reducido desorden en interfaces'
      ],
      database: {}
    };

    // Obtener todos los datos de todas las tablas
    const tables = [
      'user', 'proyecto', 'imagenProyecto', 'progresoProyecto', 
      'servicio', 'miembroEquipo', 'contactForm', 'cliente', 'configuracion'
    ];

    for (const table of tables) {
      try {
        console.log(`üìã Obteniendo datos de tabla: ${table}`);
        data.database[table] = await prisma[table].findMany();
        console.log(`‚úÖ ${table}: ${data.database[table].length} registros`);
      } catch (error) {
        console.log(`‚ö†Ô∏è Error en tabla ${table}:`, error.message);
        data.database[table] = [];
      }
    }

    // Agregar estad√≠sticas del backup
    data.stats = {
      totalTables: Object.keys(data.database).length,
      totalRecords: Object.values(data.database).reduce((sum, table) => sum + table.length, 0),
      tableStats: Object.entries(data.database).reduce((stats, [table, records]) => {
        stats[table] = records.length;
        return stats;
      }, {})
    };

    console.log('üíæ Guardando backup...');
    await fs.promises.writeFile(backupFile, JSON.stringify(data, null, 2));

    const stats = await fs.promises.stat(backupFile);
    const sizeInMB = (stats.size / (1024 * 1024)).toFixed(2);

    console.log('\nüéâ ¬°BACKUP COMPLETO EXITOSO!');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log(`üìÅ Archivo: ${backupFile}`);
    console.log(`üìä Tama√±o: ${sizeInMB} MB`);
    console.log(`üìã Total de registros: ${data.stats.totalRecords}`);
    console.log('\nüìä Detalle por tabla:');
    
    Object.entries(data.stats.tableStats).forEach(([table, count]) => {
      console.log(`   ${table.padEnd(20)} ${count.toString().padStart(3)} registros`);
    });
    
    console.log('\n‚ú® Estado actual del sistema guardado correctamente');
    console.log('üîÑ Cambios recientes incluidos en este backup:');
    data.changes.forEach(change => {
      console.log(`   ‚Ä¢ ${change}`);
    });

  } catch (error) {
    console.error('‚ùå Error al crear backup completo:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createCompleteBackup();