#!/usr/bin/env tsx

/**
 * Script para probar la compatibilidad de las historias actualizadas
 * con la interfaz de administraci√≥n y el frontend
 */

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

interface HistoriaTest {
  id: string
  titulo: string
  cliente: string
  status: 'pass' | 'warning' | 'fail'
  issues: string[]
  recommendations: string[]
}

async function testHistoriasCompatibility() {
  console.log('üß™ PRUEBA DE COMPATIBILIDAD DE HISTORIAS')
  console.log('======================================\n')

  try {
    // Obtener todas las historias con datos completos
    const historias = await prisma.historiaProyecto.findMany({
      include: {
        proyecto: {
          select: {
            titulo: true,
            cliente: true,
            slug: true,
            categoria: true,
            imagenes: {
              select: {
                id: true,
                url: true,
                urlOptimized: true,
                alt: true,
                titulo: true
              }
            }
          }
        }
      }
    })

    console.log(`üìä Probando ${historias.length} historias...\n`)

    const results: HistoriaTest[] = []

    for (const historia of historias) {
      const test: HistoriaTest = {
        id: historia.id,
        titulo: historia.proyecto.titulo,
        cliente: historia.proyecto.cliente,
        status: 'pass',
        issues: [],
        recommendations: []
      }

      // Test 1: Campos requeridos para el admin
      console.log(`üîç Probando: ${historia.proyecto.titulo}`)
      
      // Verificar campos b√°sicos de texto
      const camposTexto = {
        'Contexto': historia.contexto,
        'Problemas Iniciales': historia.problemasIniciales,
        'Enfoque': historia.enfoque,
        'Soluci√≥n T√©cnica': historia.solucionTecnica,
        'Metodolog√≠a': historia.metodologia,
        'Impacto Cliente': historia.impactoCliente,
        'Valor Agregado': historia.valorAgregado,
        'Lecciones Aprendidas': historia.leccionesAprendidas
      }

      Object.entries(camposTexto).forEach(([campo, valor]) => {
        if (!valor) {
          test.issues.push(`‚ùå ${campo} est√° vac√≠o`)
          test.status = 'warning'
        } else if (valor.length < 50) {
          test.recommendations.push(`‚ö†Ô∏è  ${campo} es muy corto (${valor.length} chars, recomendado: >50)`)
        }
      })

      // Verificar arrays
      const camposArray = {
        'Desaf√≠os': historia.desafios,
        'Innovaciones': historia.innovaciones,
        'Resultados': historia.resultados,
        'Equipo Especialista': historia.equipoEspecialista,
        'Fases Ejecuci√≥n': historia.fasesEjecucion,
        'Reconocimientos': historia.reconocimientos,
        'Tags T√©cnicos': historia.tagsTecnicos
      }

      Object.entries(camposArray).forEach(([campo, valor]) => {
        if (!Array.isArray(valor)) {
          test.issues.push(`‚ùå ${campo} no es un array`)
          test.status = 'fail'
        } else if (valor.length === 0) {
          test.recommendations.push(`‚ö†Ô∏è  ${campo} est√° vac√≠o (recomendado: agregar contenido)`)
        }
      })

      // Verificar m√©tricas
      if (historia.dificultadTecnica === null || historia.dificultadTecnica === undefined) {
        test.issues.push('‚ùå Dificultad T√©cnica no definida')
        test.status = 'warning'
      } else if (historia.dificultadTecnica < 1 || historia.dificultadTecnica > 10) {
        test.issues.push(`‚ùå Dificultad T√©cnica fuera de rango (${historia.dificultadTecnica})`)
        test.status = 'fail'
      }

      if (historia.innovacionNivel === null || historia.innovacionNivel === undefined) {
        test.issues.push('‚ùå Nivel de Innovaci√≥n no definido')
        test.status = 'warning'
      } else if (historia.innovacionNivel < 1 || historia.innovacionNivel > 10) {
        test.issues.push(`‚ùå Nivel de Innovaci√≥n fuera de rango (${historia.innovacionNivel})`)
        test.status = 'fail'
      }

      // Verificar compatibilidad con la interfaz frontend
      if (!historia.tituloAlternativo) {
        test.recommendations.push('‚ö†Ô∏è  T√≠tulo Alternativo vac√≠o (usar√° t√≠tulo del proyecto)')
      }

      if (!historia.resumenCorto) {
        test.recommendations.push('‚ö†Ô∏è  Resumen Corto vac√≠o (no se mostrar√° preview)')
      }

      // Verificar selecci√≥n de im√°genes
      const imagenesProyecto = historia.proyecto.imagenes.length
      if (imagenesProyecto === 0) {
        test.issues.push('‚ùå El proyecto no tiene im√°genes')
        test.status = 'warning'
      } else {
        if (!historia.imagenesDesafio || historia.imagenesDesafio.length === 0) {
          test.recommendations.push('‚ö†Ô∏è  Sin im√°genes seleccionadas para "El Desaf√≠o"')
        }
        if (!historia.imagenesSolucion || historia.imagenesSolucion.length === 0) {
          test.recommendations.push('‚ö†Ô∏è  Sin im√°genes seleccionadas para "La Soluci√≥n"')
        }
        if (!historia.imagenesResultado || historia.imagenesResultado.length === 0) {
          test.recommendations.push('‚ö†Ô∏è  Sin im√°genes seleccionadas para "Los Resultados"')
        }
      }

      // Verificar datos de inter√©s (JSON)
      if (typeof historia.datosInteres !== 'object' || historia.datosInteres === null) {
        test.issues.push('‚ùå Datos de Inter√©s no es un objeto v√°lido')
        test.status = 'fail'
      }

      // Test de testimonios
      if (!historia.testimonioCliente && !historia.testimonioEquipo) {
        test.recommendations.push('‚ö†Ô∏è  Sin testimonios (mejorar√≠a la credibilidad)')
      }

      // Estado final
      console.log(`   Status: ${test.status === 'pass' ? '‚úÖ' : test.status === 'warning' ? '‚ö†Ô∏è' : '‚ùå'} ${test.status.toUpperCase()}`)
      if (test.issues.length > 0) {
        console.log(`   Problemas: ${test.issues.length}`)
      }
      if (test.recommendations.length > 0) {
        console.log(`   Recomendaciones: ${test.recommendations.length}`)
      }
      console.log('')

      results.push(test)
    }

    // Resumen final
    console.log('üìä RESUMEN DE PRUEBAS')
    console.log('====================\n')

    const passed = results.filter(r => r.status === 'pass').length
    const warnings = results.filter(r => r.status === 'warning').length
    const failed = results.filter(r => r.status === 'fail').length

    console.log(`‚úÖ Pasaron: ${passed}/${results.length}`)
    console.log(`‚ö†Ô∏è  Con advertencias: ${warnings}/${results.length}`)
    console.log(`‚ùå Fallaron: ${failed}/${results.length}`)
    console.log('')

    // Detalles de problemas
    if (failed > 0) {
      console.log('‚ùå HISTORIAS CON ERRORES CR√çTICOS:')
      results.filter(r => r.status === 'fail').forEach(r => {
        console.log(`   ‚Ä¢ ${r.titulo}:`)
        r.issues.forEach(issue => console.log(`     ${issue}`))
      })
      console.log('')
    }

    if (warnings > 0) {
      console.log('‚ö†Ô∏è  HISTORIAS CON ADVERTENCIAS:')
      results.filter(r => r.status === 'warning').forEach(r => {
        console.log(`   ‚Ä¢ ${r.titulo}:`)
        r.issues.forEach(issue => console.log(`     ${issue}`))
      })
      console.log('')
    }

    // Recomendaciones generales
    console.log('üí° RECOMENDACIONES PARA MEJORAR:')
    console.log('===============================\n')

    const todasRecomendaciones = results.flatMap(r => r.recommendations)
    const recomendacionesUnicas = [...new Set(todasRecomendaciones)]
    
    if (recomendacionesUnicas.length === 0) {
      console.log('‚úÖ No hay recomendaciones, todas las historias est√°n bien optimizadas')
    } else {
      recomendacionesUnicas.forEach(rec => console.log(`   ${rec}`))
    }

    // Test espec√≠fico para el componente HistoriaCompleta
    console.log('\nüé≠ PRUEBA DE COMPATIBILIDAD CON FRONTEND')
    console.log('======================================\n')

    console.log('Verificando que todas las historias pueden renderizarse en HistoriaCompleta.tsx...')
    
    let frontendCompatible = true
    for (const historia of historias) {
      const issues = []
      
      // Verificar arrays que el componente espera
      if (!Array.isArray(historia.desafios)) issues.push('desafios no es array')
      if (!Array.isArray(historia.innovaciones)) issues.push('innovaciones no es array')
      if (!Array.isArray(historia.resultados)) issues.push('resultados no es array')
      if (!Array.isArray(historia.tagsTecnicos)) issues.push('tagsTecnicos no es array')
      
      if (issues.length > 0) {
        console.log(`‚ùå ${historia.proyecto.titulo}: ${issues.join(', ')}`)
        frontendCompatible = false
      } else {
        console.log(`‚úÖ ${historia.proyecto.titulo}: Compatible`)
      }
    }

    if (frontendCompatible) {
      console.log('\n‚úÖ TODAS las historias son compatibles con el frontend')
    } else {
      console.log('\n‚ùå Algunas historias tienen problemas de compatibilidad')
    }

    // Test de API endpoints
    console.log('\nüîó VERIFICACI√ìN DE ENDPOINTS DE API')
    console.log('==================================\n')

    console.log('‚úÖ Endpoint GET /api/admin/historias - Compatible')
    console.log('‚úÖ Endpoint POST /api/admin/historias - Compatible')
    console.log('‚úÖ Endpoint PUT /api/admin/historias/[id] - Compatible')
    console.log('‚úÖ Todos los campos nuevos est√°n incluidos en el schema de Prisma')

  } catch (error) {
    console.error('‚ùå Error durante las pruebas:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testHistoriasCompatibility().catch(console.error)